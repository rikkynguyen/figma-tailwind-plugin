figma.showUI(__html__, { width: 300, height: 400 });

figma.ui.onmessage = async function (msg) {
  if (msg.type === 'export') {
    const selectedIds = msg.selected;
    const collections = await figma.variables.getLocalVariableCollectionsAsync();
    const allVariables = await figma.variables.getLocalVariablesAsync();

    const selectedCollections = collections.filter(function (c) {
      return selectedIds.includes(c.id);
    });

    const selectedVars = allVariables.filter(function (v) {
      return selectedIds.includes(v.variableCollectionId);
    });

    const tokensByCollection = {};

    for (var i = 0; i < selectedCollections.length; i++) {
      var collection = selectedCollections[i];
      var collectionName = collection.name || "Unnamed";

      tokensByCollection[collectionName] = {};

      var collectionVars = selectedVars.filter(function (v) {
        return v.variableCollectionId === collection.id;
      });

      for (var j = 0; j < collectionVars.length; j++) {
        var variable = collectionVars[j];
        var originalName = variable.name;
        var key = originalName.replace(/\//g, '-').replace(/\s+/g, '-').toLowerCase();

        var group = "custom";

        if (variable.resolvedType === 'COLOR') {
          group = "color";
        } else if (variable.resolvedType === 'FLOAT') {
          group = collectionName.toLowerCase().includes("typography") ? "text" : "spacing";
        }

        var modeIds = Object.keys(variable.valuesByMode);
        var val = modeIds.length > 0 ? variable.valuesByMode[modeIds[0]] : null;

        if (!tokensByCollection[collectionName][group]) {
          tokensByCollection[collectionName][group] = [];
        }

        tokensByCollection[collectionName][group].push({
          id: variable.id,
          name: originalName,
          key: key,
          group: group,
          resolvedType: variable.resolvedType,
          isAlias: val && typeof val === 'object' && val.type === 'VARIABLE_ALIAS',
          rawValue: val
        });
      }
    }

    const lines = [];

    lines.push(`
/**
 * Tailwind v4 Theme Variables
 * Generated by Figma Plugin
 * ${new Date().toISOString()}
 */
@import "tailwindcss";

@theme {
`.trim());

    for (var collectionName in tokensByCollection) {
      var groups = tokensByCollection[collectionName];

      for (var groupName in groups) {
        lines.push("  /* Group: " + groupName + " (" + collectionName + ") */");

        var items = groups[groupName];

        for (var i = 0; i < items.length; i++) {
          var token = items[i];

          // Use original full name path converted to --token-name
          var varKey = token.name.replace(/\//g, '-').replace(/\s+/g, '-').toLowerCase();

          // Add --color- prefix ONLY for Colors collection
          var varName = (collectionName.toLowerCase() === 'colors')
            ? "--color-" + varKey
            : "--" + varKey;

          if (token.isAlias) {
            var aliasVar = allVariables.find(function (v) {
              return v.id === token.rawValue.id;
            });
            var aliasName = aliasVar ? aliasVar.name.replace(/\//g, '-').replace(/\s+/g, '-').toLowerCase() : "alias";
            var colorCollection = null;
            for (var k = 0; k < collections.length; k++) {
              if (collections[k].name && collections[k].name.toLowerCase() === "colors") {
                colorCollection = collections[k];
                break;
              }
            }
            var aliasPrefix = aliasVar && colorCollection && aliasVar.variableCollectionId === colorCollection.id ? "color-" : "";

            lines.push("  " + varName + ": var(--" + aliasPrefix + aliasName + ");");
          } else if (token.resolvedType === 'COLOR') {
            var val = token.rawValue;
            if (val && val.r !== undefined) {
              var r = Math.round(val.r * 255).toString(16).padStart(2, '0');
              var g = Math.round(val.g * 255).toString(16).padStart(2, '0');
              var b = Math.round(val.b * 255).toString(16).padStart(2, '0');
              var a = val.a !== undefined ? val.a : 1;

              if (a === 1) {
                lines.push("  " + varName + ": #" + r + g + b + ";");
              } else {
                lines.push("  " + varName + ": #" + r + g + b + Math.round(a * 255).toString(16).padStart(2, '0') + ";");
              }
            }
          } else if (token.resolvedType === 'FLOAT') {
            var px = parseFloat(token.rawValue);
            var rem = (px / 16).toFixed(4).replace(/\.0+$/, '').replace(/0+$/, '');
            lines.push("  " + varName + ": " + rem + "rem;");
          } else {
            lines.push("  " + varName + ": " + token.rawValue + ";");
          }
        }

        lines.push(""); // blank line between groups
      }

      lines.push(""); // blank line between collections
    }

    lines.push("}");

    var cssContent = lines.join("\n");

    figma.ui.postMessage({
      type: "download-css",
      css: cssContent
    });
  } else {
    const collections = await figma.variables.getLocalVariableCollectionsAsync();
    const formatted = collections.map(function (col) {
      return {
        id: col.id,
        name: col.name || "(Unnamed Collection)"
      };
    });
    figma.ui.postMessage({ collections: formatted });
  }
};

(async function () {
  const collections = await figma.variables.getLocalVariableCollectionsAsync();
  const formatted = collections.map(function (col) {
    return {
      id: col.id,
      name: col.name || "(Unnamed Collection)"
    };
  });
  figma.ui.postMessage({ collections: formatted });
})();